Terminals which are not used

   BOOL
   ARRAY
   RANGE
   OF
   AND
   OR
   XOR
   NOT
   TRUE
   FALSE


State 23 conflicts: 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 @1: /* empty */

    2 program: @1 PROG ID ';' block PERIOD

    3 block: variables cmpdstmt

    4 variables: /* empty */
    5          | VAR vardcls

    6 vardcls: vardcls vardcl ';'
    7        | vardcl ';'
    8        | error ';'

    9 vardcl: idlist ':' INT

   10 idlist: idlist ',' ID
   11       | ID

   12 stmtlist: stmtlist ';' stmt
   13         | stmt
   14         | error

   15 stmt: ifstmt
   16     | wstmt
   17     | fstmt
   18     | astmt
   19     | writestmt
   20     | cmpdstmt
   21     | error

   22 cmpdstmt: BEG stmtlist END

   23 ifstmt: ifhead THEN stmt

   24 @2: /* empty */

   25 ifstmt: ifhead THEN stmt ELSE @2 stmt

   26 ifhead: IF condexp
   27       | error

   28 writestmt: WRITELN '(' exp ')'

   29 @3: /* empty */

   30 @4: /* empty */

   31 wstmt: WHILE @3 condexp @4 DO stmt

   32 fstmt: FOR ID ASG ICONST ',' ICONST DO astmt

   33 astmt: lvalue ASG exp

   34 lvalue: ID
   35       | ID '[' exp ']'

   36 exp: exp '+' exp
   37    | exp '-' exp
   38    | exp '*' exp
   39    | ID
   40    | ID '[' exp ']'
   41    | ICONST
   42    | error

   43 condexp: exp NEQ exp
   44        | exp EQ exp
   45        | exp LT exp
   46        | exp LEQ exp
   47        | error


Terminals, with rules where they appear

$end (0) 0
'(' (40) 28
')' (41) 28
'*' (42) 38
'+' (43) 36
',' (44) 10 32
'-' (45) 37
':' (58) 9
';' (59) 2 6 7 8 12
'[' (91) 35 40
']' (93) 35 40
error (256) 8 14 21 27 42 47
PROG (258) 2
PERIOD (259) 2
VAR (260) 5
INT (261) 9
BOOL (262)
ARRAY (263)
RANGE (264)
OF (265)
WRITELN (266) 28
THEN (267) 23 25
IF (268) 26
BEG (269) 22
END (270) 22
ASG (271) 32 33
DO (272) 31 32
FOR (273) 32
EQ (274) 44
NEQ (275) 43
LT (276) 45
LEQ (277) 46
AND (278)
OR (279)
XOR (280)
NOT (281)
TRUE (282)
FALSE (283)
ELSE (284) 25
WHILE (285) 31
ID (286) 2 10 11 32 34 35 39 40
ICONST (287) 32 41


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
program (44)
    on left: 2, on right: 0
@1 (45)
    on left: 1, on right: 2
block (46)
    on left: 3, on right: 2
variables (47)
    on left: 4 5, on right: 3
vardcls (48)
    on left: 6 7 8, on right: 5 6
vardcl (49)
    on left: 9, on right: 6 7
idlist (50)
    on left: 10 11, on right: 9 10
stmtlist (51)
    on left: 12 13 14, on right: 12 22
stmt (52)
    on left: 15 16 17 18 19 20 21, on right: 12 13 23 25 31
cmpdstmt (53)
    on left: 22, on right: 3 20
ifstmt (54)
    on left: 23 25, on right: 15
@2 (55)
    on left: 24, on right: 25
ifhead (56)
    on left: 26 27, on right: 23 25
writestmt (57)
    on left: 28, on right: 19
wstmt (58)
    on left: 31, on right: 16
@3 (59)
    on left: 29, on right: 31
@4 (60)
    on left: 30, on right: 31
fstmt (61)
    on left: 32, on right: 17
astmt (62)
    on left: 33, on right: 18 32
lvalue (63)
    on left: 34 35, on right: 33
exp (64)
    on left: 36 37 38 39 40 41 42, on right: 28 33 35 36 37 38 40 43
    44 45 46
condexp (65)
    on left: 43 44 45 46 47, on right: 26 31


state 0

    0 $accept: . program $end

    $default  reduce using rule 1 (@1)

    program  go to state 1
    @1       go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    2 program: @1 . PROG ID ';' block PERIOD

    PROG  shift, and go to state 4


state 3

    0 $accept: program $end .

    $default  accept


state 4

    2 program: @1 PROG . ID ';' block PERIOD

    ID  shift, and go to state 5


state 5

    2 program: @1 PROG ID . ';' block PERIOD

    ';'  shift, and go to state 6


state 6

    2 program: @1 PROG ID ';' . block PERIOD

    VAR  shift, and go to state 7

    $default  reduce using rule 4 (variables)

    block      go to state 8
    variables  go to state 9


state 7

    5 variables: VAR . vardcls

    error  shift, and go to state 10
    ID     shift, and go to state 11

    vardcls  go to state 12
    vardcl   go to state 13
    idlist   go to state 14


state 8

    2 program: @1 PROG ID ';' block . PERIOD

    PERIOD  shift, and go to state 15


state 9

    3 block: variables . cmpdstmt

    BEG  shift, and go to state 16

    cmpdstmt  go to state 17


state 10

    8 vardcls: error . ';'

    ';'  shift, and go to state 18


state 11

   11 idlist: ID .

    $default  reduce using rule 11 (idlist)


state 12

    5 variables: VAR vardcls .
    6 vardcls: vardcls . vardcl ';'

    ID  shift, and go to state 11

    $default  reduce using rule 5 (variables)

    vardcl  go to state 19
    idlist  go to state 14


state 13

    7 vardcls: vardcl . ';'

    ';'  shift, and go to state 20


state 14

    9 vardcl: idlist . ':' INT
   10 idlist: idlist . ',' ID

    ':'  shift, and go to state 21
    ','  shift, and go to state 22


state 15

    2 program: @1 PROG ID ';' block PERIOD .

    $default  reduce using rule 2 (program)


state 16

   22 cmpdstmt: BEG . stmtlist END

    error    shift, and go to state 23
    WRITELN  shift, and go to state 24
    IF       shift, and go to state 25
    BEG      shift, and go to state 16
    FOR      shift, and go to state 26
    WHILE    shift, and go to state 27
    ID       shift, and go to state 28

    stmtlist   go to state 29
    stmt       go to state 30
    cmpdstmt   go to state 31
    ifstmt     go to state 32
    ifhead     go to state 33
    writestmt  go to state 34
    wstmt      go to state 35
    fstmt      go to state 36
    astmt      go to state 37
    lvalue     go to state 38


state 17

    3 block: variables cmpdstmt .

    $default  reduce using rule 3 (block)


state 18

    8 vardcls: error ';' .

    $default  reduce using rule 8 (vardcls)


state 19

    6 vardcls: vardcls vardcl . ';'

    ';'  shift, and go to state 39


state 20

    7 vardcls: vardcl ';' .

    $default  reduce using rule 7 (vardcls)


state 21

    9 vardcl: idlist ':' . INT

    INT  shift, and go to state 40


state 22

   10 idlist: idlist ',' . ID

    ID  shift, and go to state 41


state 23

   14 stmtlist: error .
   21 stmt: error .
   27 ifhead: error .

    THEN      reduce using rule 27 (ifhead)
    END       reduce using rule 14 (stmtlist)
    END       [reduce using rule 21 (stmt)]
    ';'       reduce using rule 14 (stmtlist)
    ';'       [reduce using rule 21 (stmt)]
    $default  reduce using rule 14 (stmtlist)


state 24

   28 writestmt: WRITELN . '(' exp ')'

    '('  shift, and go to state 42


state 25

   26 ifhead: IF . condexp

    error   shift, and go to state 43
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp      go to state 46
    condexp  go to state 47


state 26

   32 fstmt: FOR . ID ASG ICONST ',' ICONST DO astmt

    ID  shift, and go to state 48


state 27

   31 wstmt: WHILE . @3 condexp @4 DO stmt

    $default  reduce using rule 29 (@3)

    @3  go to state 49


state 28

   34 lvalue: ID .
   35       | ID . '[' exp ']'

    '['  shift, and go to state 50

    $default  reduce using rule 34 (lvalue)


state 29

   12 stmtlist: stmtlist . ';' stmt
   22 cmpdstmt: BEG stmtlist . END

    END  shift, and go to state 51
    ';'  shift, and go to state 52


state 30

   13 stmtlist: stmt .

    $default  reduce using rule 13 (stmtlist)


state 31

   20 stmt: cmpdstmt .

    $default  reduce using rule 20 (stmt)


state 32

   15 stmt: ifstmt .

    $default  reduce using rule 15 (stmt)


state 33

   23 ifstmt: ifhead . THEN stmt
   25       | ifhead . THEN stmt ELSE @2 stmt

    THEN  shift, and go to state 53


state 34

   19 stmt: writestmt .

    $default  reduce using rule 19 (stmt)


state 35

   16 stmt: wstmt .

    $default  reduce using rule 16 (stmt)


state 36

   17 stmt: fstmt .

    $default  reduce using rule 17 (stmt)


state 37

   18 stmt: astmt .

    $default  reduce using rule 18 (stmt)


state 38

   33 astmt: lvalue . ASG exp

    ASG  shift, and go to state 54


state 39

    6 vardcls: vardcls vardcl ';' .

    $default  reduce using rule 6 (vardcls)


state 40

    9 vardcl: idlist ':' INT .

    $default  reduce using rule 9 (vardcl)


state 41

   10 idlist: idlist ',' ID .

    $default  reduce using rule 10 (idlist)


state 42

   28 writestmt: WRITELN '(' . exp ')'

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 56


state 43

   42 exp: error .
   47 condexp: error .

    THEN      reduce using rule 47 (condexp)
    DO        reduce using rule 47 (condexp)
    $default  reduce using rule 42 (exp)


state 44

   39 exp: ID .
   40    | ID . '[' exp ']'

    '['  shift, and go to state 57

    $default  reduce using rule 39 (exp)


state 45

   41 exp: ICONST .

    $default  reduce using rule 41 (exp)


state 46

   36 exp: exp . '+' exp
   37    | exp . '-' exp
   38    | exp . '*' exp
   43 condexp: exp . NEQ exp
   44        | exp . EQ exp
   45        | exp . LT exp
   46        | exp . LEQ exp

    EQ   shift, and go to state 58
    NEQ  shift, and go to state 59
    LT   shift, and go to state 60
    LEQ  shift, and go to state 61
    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64


state 47

   26 ifhead: IF condexp .

    $default  reduce using rule 26 (ifhead)


state 48

   32 fstmt: FOR ID . ASG ICONST ',' ICONST DO astmt

    ASG  shift, and go to state 65


state 49

   31 wstmt: WHILE @3 . condexp @4 DO stmt

    error   shift, and go to state 43
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp      go to state 46
    condexp  go to state 66


state 50

   35 lvalue: ID '[' . exp ']'

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 67


state 51

   22 cmpdstmt: BEG stmtlist END .

    $default  reduce using rule 22 (cmpdstmt)


state 52

   12 stmtlist: stmtlist ';' . stmt

    error    shift, and go to state 68
    WRITELN  shift, and go to state 24
    IF       shift, and go to state 25
    BEG      shift, and go to state 16
    FOR      shift, and go to state 26
    WHILE    shift, and go to state 27
    ID       shift, and go to state 28

    stmt       go to state 69
    cmpdstmt   go to state 31
    ifstmt     go to state 32
    ifhead     go to state 33
    writestmt  go to state 34
    wstmt      go to state 35
    fstmt      go to state 36
    astmt      go to state 37
    lvalue     go to state 38


state 53

   23 ifstmt: ifhead THEN . stmt
   25       | ifhead THEN . stmt ELSE @2 stmt

    error    shift, and go to state 68
    WRITELN  shift, and go to state 24
    IF       shift, and go to state 25
    BEG      shift, and go to state 16
    FOR      shift, and go to state 26
    WHILE    shift, and go to state 27
    ID       shift, and go to state 28

    stmt       go to state 70
    cmpdstmt   go to state 31
    ifstmt     go to state 32
    ifhead     go to state 33
    writestmt  go to state 34
    wstmt      go to state 35
    fstmt      go to state 36
    astmt      go to state 37
    lvalue     go to state 38


state 54

   33 astmt: lvalue ASG . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 71


state 55

   42 exp: error .

    $default  reduce using rule 42 (exp)


state 56

   28 writestmt: WRITELN '(' exp . ')'
   36 exp: exp . '+' exp
   37    | exp . '-' exp
   38    | exp . '*' exp

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64
    ')'  shift, and go to state 72


state 57

   40 exp: ID '[' . exp ']'

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 73


state 58

   44 condexp: exp EQ . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 74


state 59

   43 condexp: exp NEQ . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 75


state 60

   45 condexp: exp LT . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 76


state 61

   46 condexp: exp LEQ . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 77


state 62

   36 exp: exp '+' . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 78


state 63

   37 exp: exp '-' . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 79


state 64

   38 exp: exp '*' . exp

    error   shift, and go to state 55
    ID      shift, and go to state 44
    ICONST  shift, and go to state 45

    exp  go to state 80


state 65

   32 fstmt: FOR ID ASG . ICONST ',' ICONST DO astmt

    ICONST  shift, and go to state 81


state 66

   31 wstmt: WHILE @3 condexp . @4 DO stmt

    $default  reduce using rule 30 (@4)

    @4  go to state 82


state 67

   35 lvalue: ID '[' exp . ']'
   36 exp: exp . '+' exp
   37    | exp . '-' exp
   38    | exp . '*' exp

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64
    ']'  shift, and go to state 83


state 68

   21 stmt: error .
   27 ifhead: error .

    THEN      reduce using rule 27 (ifhead)
    $default  reduce using rule 21 (stmt)


state 69

   12 stmtlist: stmtlist ';' stmt .

    $default  reduce using rule 12 (stmtlist)


state 70

   23 ifstmt: ifhead THEN stmt .
   25       | ifhead THEN stmt . ELSE @2 stmt

    ELSE  shift, and go to state 84

    $default  reduce using rule 23 (ifstmt)


state 71

   33 astmt: lvalue ASG exp .
   36 exp: exp . '+' exp
   37    | exp . '-' exp
   38    | exp . '*' exp

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64

    $default  reduce using rule 33 (astmt)


state 72

   28 writestmt: WRITELN '(' exp ')' .

    $default  reduce using rule 28 (writestmt)


state 73

   36 exp: exp . '+' exp
   37    | exp . '-' exp
   38    | exp . '*' exp
   40    | ID '[' exp . ']'

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64
    ']'  shift, and go to state 85


state 74

   36 exp: exp . '+' exp
   37    | exp . '-' exp
   38    | exp . '*' exp
   44 condexp: exp EQ exp .

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64

    $default  reduce using rule 44 (condexp)


state 75

   36 exp: exp . '+' exp
   37    | exp . '-' exp
   38    | exp . '*' exp
   43 condexp: exp NEQ exp .

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64

    $default  reduce using rule 43 (condexp)


state 76

   36 exp: exp . '+' exp
   37    | exp . '-' exp
   38    | exp . '*' exp
   45 condexp: exp LT exp .

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64

    $default  reduce using rule 45 (condexp)


state 77

   36 exp: exp . '+' exp
   37    | exp . '-' exp
   38    | exp . '*' exp
   46 condexp: exp LEQ exp .

    '+'  shift, and go to state 62
    '-'  shift, and go to state 63
    '*'  shift, and go to state 64

    $default  reduce using rule 46 (condexp)


state 78

   36 exp: exp . '+' exp
   36    | exp '+' exp .
   37    | exp . '-' exp
   38    | exp . '*' exp

    '*'  shift, and go to state 64

    $default  reduce using rule 36 (exp)


state 79

   36 exp: exp . '+' exp
   37    | exp . '-' exp
   37    | exp '-' exp .
   38    | exp . '*' exp

    '*'  shift, and go to state 64

    $default  reduce using rule 37 (exp)


state 80

   36 exp: exp . '+' exp
   37    | exp . '-' exp
   38    | exp . '*' exp
   38    | exp '*' exp .

    $default  reduce using rule 38 (exp)


state 81

   32 fstmt: FOR ID ASG ICONST . ',' ICONST DO astmt

    ','  shift, and go to state 86


state 82

   31 wstmt: WHILE @3 condexp @4 . DO stmt

    DO  shift, and go to state 87


state 83

   35 lvalue: ID '[' exp ']' .

    $default  reduce using rule 35 (lvalue)


state 84

   25 ifstmt: ifhead THEN stmt ELSE . @2 stmt

    $default  reduce using rule 24 (@2)

    @2  go to state 88


state 85

   40 exp: ID '[' exp ']' .

    $default  reduce using rule 40 (exp)


state 86

   32 fstmt: FOR ID ASG ICONST ',' . ICONST DO astmt

    ICONST  shift, and go to state 89


state 87

   31 wstmt: WHILE @3 condexp @4 DO . stmt

    error    shift, and go to state 68
    WRITELN  shift, and go to state 24
    IF       shift, and go to state 25
    BEG      shift, and go to state 16
    FOR      shift, and go to state 26
    WHILE    shift, and go to state 27
    ID       shift, and go to state 28

    stmt       go to state 90
    cmpdstmt   go to state 31
    ifstmt     go to state 32
    ifhead     go to state 33
    writestmt  go to state 34
    wstmt      go to state 35
    fstmt      go to state 36
    astmt      go to state 37
    lvalue     go to state 38


state 88

   25 ifstmt: ifhead THEN stmt ELSE @2 . stmt

    error    shift, and go to state 68
    WRITELN  shift, and go to state 24
    IF       shift, and go to state 25
    BEG      shift, and go to state 16
    FOR      shift, and go to state 26
    WHILE    shift, and go to state 27
    ID       shift, and go to state 28

    stmt       go to state 91
    cmpdstmt   go to state 31
    ifstmt     go to state 32
    ifhead     go to state 33
    writestmt  go to state 34
    wstmt      go to state 35
    fstmt      go to state 36
    astmt      go to state 37
    lvalue     go to state 38


state 89

   32 fstmt: FOR ID ASG ICONST ',' ICONST . DO astmt

    DO  shift, and go to state 92


state 90

   31 wstmt: WHILE @3 condexp @4 DO stmt .

    $default  reduce using rule 31 (wstmt)


state 91

   25 ifstmt: ifhead THEN stmt ELSE @2 stmt .

    $default  reduce using rule 25 (ifstmt)


state 92

   32 fstmt: FOR ID ASG ICONST ',' ICONST DO . astmt

    ID  shift, and go to state 28

    astmt   go to state 93
    lvalue  go to state 38


state 93

   32 fstmt: FOR ID ASG ICONST ',' ICONST DO astmt .

    $default  reduce using rule 32 (fstmt)
